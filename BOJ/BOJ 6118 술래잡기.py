N, M = map(int, input().split())
# 인접 리스트와 방문 확인 리스트 선언
# 헛간을 1번부터 세므로, 인덱스 0을 사용하지 않는 대신 list를 한 칸 늘림
arr = [[] for _ in range(N + 1)]
v = [0] * (N + 1) 
v[1] = 1 # 1번에서 시작할 것이므로 거리 기록
				 # 방문 표시의 역할을 겸하기 위해 거리 1로 시작하고, 마지막 출력 때 1을 뺌

for _ in range(M): # 반복문을 통해 인접 리스트를 양방향으로 채움
    j, i = map(int, input().split())
    arr[j] += [i]
    arr[i] += [j]

s = [0] * N # 헛간 수만큼의 공간을 가진 큐를 초기화
s[0] = 1 # 큐의 처음에 출발지인 1번 헛간을 입력
ptr = 0 # 큐에 마지막으로 입력된 값을 가리키는 포인터 초기화
for n in s: # 큐를 순회하면서,
    for k in arr[n]: # 해당 큐의 인접 헛간들을 순회하며
        if not v[k]: # 방문한 적이 없다면
            v[k] = v[n] + 1 # 출발지로부터의 거리를 방문 확인 리스트에 기록하고
            ptr += 1 # 포인터를 한 칸 뒤 빈 공간으로 이동한 다음
            s[ptr] = k # 큐에 헛간 번호를 기록

m = 1 # 최대 거리 헛간 번호를 기록할 변수 초기화
for d in range(1, N + 1): # 방문 확인 리스트를 순회하며
    if v[d] > v[m]: m = d # 거리가 더 먼 헛간을 찾으면 변수 m을 갱신
print(m, v[m] - 1, v.count(v[m])) # 헛간 번호, 거리, 같은 거리의 헛간 수를 출력